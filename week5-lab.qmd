---
title: "Week5 Lab"
format: html
editor: visual
---

```{r}
library(sf) # vector handling
library(terra) # raster handling
library(tidyverse)
library(tmap) # map making
library(spData) # spatial data
library(spDataLarge) # spatial data
library(viridisLite)
```
```{r}
# Raster data
elevation <- rast(system.file("raster/srtm.tif", package = 'spDataLarge'))

# Vector data
boundary <- read_sf(system.file('vector/zion.gpkg', package = 'spDataLarge'))
```

```{r}
# First thing to alwasy to : Check to see if CRS matches
if(crs(elevation) == crs(boundary)) {
  print('CRS match!')
}else{
  warning('update CRS to match')
  boundary <- st_transform(boundary, st_crs(elevation))         # Can pull CRS from a raster object to transform a vector CRS
}
```
```{r}
# Put the raster down first
tm_shape(elevation) +
  tm_raster(title = "Elevation(meters)") +
  tm_shape(boundary) + # Put down vector
  tm_borders(lwd = 2) +   # Update width of the line
  tm_layout(legend.outside = TRUE)      # Place legend to outside



```

```{r}
# Practice cropping and clipping the raster
# Crop the raster to the extent of the vector object

elevation_cropped <- terra::crop(elevation, boundary) # first argument what to clip, second argument how to clip first

# now the elevation_cropped object is slightly smaller extent, still needs to be adjusted down using a mask
tm_shape(elevation_cropped) +
  tm_raster(title = "Elevation(meters)") +
  tm_shape(boundary) + # Put down vector
  tm_borders(lwd = 2) +   # Update width of the line
  tm_layout(legend.outside = TRUE)      # Place legend to outside

```

```{r}
# Mask raster based on the vector object boundary
# Convert the cells outside of the park to NA

# Cropped to the extent and masked
elevation_masked <- terra::mask(elevation_cropped, boundary)  # Gets rid of elevation raster data outside the boundary mask


tm_shape(elevation_masked) +
  tm_raster(title = "Elevation(meters)") +
  tm_shape(boundary) + # Put down vector
  tm_borders(lwd = 2) +   # Update width of the line
  tm_layout(legend.outside = TRUE)      # Place legend to outside

```
```{r}
# Inverse mask raster (Get all the raster data OUTSIDE of the boundary)
# Convert cells outside of the park to NA

elevation_inverse_mask <- terra::mask(elevation_cropped, boundary,
                                      inverse = TRUE)

tm_shape(elevation_inverse_mask) +
  tm_raster(title = "Elevation(meters)") +
  tm_shape(boundary) + # Put down vector
  tm_borders(lwd = 2) +   # Update width of the line
  tm_layout(legend.outside = TRUE)      # Place legend to outside

```

```{r}
# Vectorize raster

# Masking to cells inside the park
elevation_inside <- mask(elevation_cropped, boundary)

# Create mask based on value of cells
# Copy the elevation inside as a duplicate copy before subsetting
elevation_mask <- elevation_inside

# Anywhere the elevation_mask is less than 2000, assign to NA
elevation_mask[elevation_mask < 2000] <- NA

# Turn the areas into polygons
elevation_mask_poly <- terra::as.polygons(elevation_mask) |> 
  st_as_sf()

tm_shape(elevation_mask_poly) +
  tm_polygons() +
  tm_layout(legend.outside = TRUE)

```
```{r}
data('zion_points', package = 'spDataLarge')

if(crs(zion_points) == crs(elevation)){
  print('CRS Matches!')
}else{
  warning('Please Transform CRS. They dont match.')
  st_transform(zion_points, crs = st_crs(elevation))
  print('CRS match now')
}

tm_shape(elevation) +
  tm_raster() +
  tm_shape(boundary) +
  tm_borders() +
  tm_shape(zion_points) +
  tm_symbols()

pts_elevation <- terra::extract(elevation, zion_points)

zion_points <- cbind(zion_points, pts_elevation)
```

```{r}
zion_transect <- cbind(c(-133.2, -112.9),
                       c(37.45, 37.2)) %>% 
  st_linestring() %>%
  st_sfc(crs = crs(elevation)) %>%
  st_sf(geometry = .)

tm_shape(elevation) +
  tm_raster() +
  tm_shape(zion_transect) +
  tm_symbols()


zion_transect$id = 1:nrow(zion_transect)
zion_transect <- st_segmentize(zion_transect, dfMaxLength = 250)
zion_transect <- st_cast(zion_transect, 'POINT')

zion_transect <- zion_transect |> 
  group_by(id) %>%
  mutate(dist = st_distance(geometry)[,1])

transect <- terra::extract(elevation, zion_transect)
zion_transect <- cbind(zion_transect, transect)

ggplot(zion_transect, aes(x = ID, y = elevation)) +
  geom_point()
```



